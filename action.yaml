name: 'Compute Version'
description: 'Compute version based on branch name and git tags'
inputs:
  test_version_tag:
    description: 'Optional test version tag for testing purposes'
    required: false
    default: ''
  test_branch_name:
    description: 'Optional test branch name for testing purposes'
    required: false
    default: ''
outputs:
  version:
    description: 'The computed version string'
    value: ${{ steps.compute-version.outputs.version }}
runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Compute and Validate Version
      shell: bash
      id: compute-version
      run: |
        # Initialize variables
        branchName="${{ inputs.test_branch_name }}"
        if [[ -z "$branchName" ]]; then
          branchName=$(git rev-parse --abbrev-ref HEAD)
        fi

        # Fetching all tags might be necessary if you haven't already fetched the tags
        git fetch --tags

        # Determine the latest version or use the test version if provided
        latestVersion=$(git describe --tags --match "v*" --abbrev=0 --first-parent 2>/dev/null | sed 's/^v//')
        if [[ -z "$latestVersion" ]]; then
          echo "No version tags found in the repository."
          latestVersion="0.1.0" # SemVer initial version.
        fi

        # Extract the major, minor, and patch components
        IFS='.' read -r major minor patch <<< "$latestVersion"

        # Increment version based on branch type
        case "$branchName" in
          release/*)
            ((patch++))
            newVersion="v${major}.${minor}.${patch}"
            ;;
          develop)
            # For the develop branch, increment the next patch version and add a pre-release identifier
            nextPatch=$((patch + 1))
            timestamp=$(date +%Y%m%d%H%M%S) # Or use `git rev-parse --short HEAD`
            newVersion="${major}.${minor}.${nextPatch}-develop.${timestamp}"
            ;;
          feature/*|bugfix/*|alpha/*|beta/*)
            shortSHA=$(git rev-parse --short HEAD)
            jiraCardID=$(echo $branchName | grep -oP '(?<=/)[A-Z]+-\d+' || echo "")
            newVersion="${major}.${minor}.${patch}-${jiraCardID:+$jiraCardID.}${shortSHA}"
            ;;
          *)
            shortSHA=$(git rev-parse --short HEAD)
            ((patch++))
            newVersion="${major}.${minor}.${patch}-${shortSHA}"
            ;;
        esac

        echo "Computed Version: $newVersion"
        echo "version=$newVersion" >> $GITHUB_OUTPUT
