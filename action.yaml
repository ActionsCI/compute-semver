name: 'Compute Version'
description: 'Compute version based on branch name and git tags'
inputs:
  test_version_tag:
    description: 'Optional test version tag for testing purposes'
    required: false
    default: ''
  test_branch_name:
    description: 'Optional test branch name for testing purposes'
    required: false
    default: ''
outputs:
  version:
    description: 'The computed version string'
runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Compute and Validate Version
      shell: bash
      run: |
        # Correctly initialize latestVersion based on the test_version_tag input or git tags
        if [[ -n "${{ inputs.test_version_tag }}" ]]; then
          latestVersion="${{ inputs.test_version_tag }}"
        else
          git fetch --tags
          latestTag=$(git tag --sort=-v:refname | grep '^v' | head -n 1)
          if [ -z "$latestTag" ]; then
            # Default to 0.1.0 if no tags are found
            latestVersion="0.1.0"
            initialBuildNumber=1
          else
            latestVersion=${latestTag#v}
            # Extract build number from the latest tag if present
            if [[ "$latestTag" =~ \+sha\.([0-9]+)$ ]]; then
              initialBuildNumber=$((${BASH_REMATCH[1]} + 1))
            else
              initialBuildNumber=1
            fi
          fi
        fi

        # Use test branch name if provided, otherwise get the current branch name
        branchName="${{ inputs.test_branch_name }}"
        if [[ -z "$branchName" ]]; then
          branchName=$(git rev-parse --abbrev-ref HEAD)
        fi

        # Determine versioning strategy based on branch type
        if [[ "$branchName" == "release/"* ]]; then
          # Increment patch version for release branch
          IFS='.' read -ra VER <<< "$latestVersion"
          ((VER[2]++))
          newVersion="${VER[0]}.${VER[1]}.${VER[2]}"
        elif [[ "$branchName" =~ feature/ ]]; then
          # Handle feature branches
          jiraCardID=$(echo $branchName | grep -oP '(?<=feature/)[A-Z]+-\d+' || echo "")
          if [[ -n "$jiraCardID" ]]; then
            newVersion="${latestVersion}-${jiraCardID}+sha.${initialBuildNumber}"
          else
            newVersion="${latestVersion}+sha.${initialBuildNumber}"
          fi
        else
          # For other types of branches, just use the base version and initial build number
          newVersion="${latestVersion}+sha.${initialBuildNumber}"
        fi

        # Output the computed version
        echo "Computed Version: $newVersion"
        echo "::set-output name=version::$newVersion"
