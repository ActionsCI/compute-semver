name: 'Compute Version'
description: 'Compute version based on branch name and git tags'
inputs:
  test_version_tag:
    description: 'Optional test version tag for testing purposes'
    required: false
    default: ''
  test_branch_name:
    description: 'Optional test branch name for testing purposes'
    required: false
    default: ''
outputs:
  version:
    description: 'The computed version string'
runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Compute and Validate Version
      shell: bash
      run: |
        # Initialize variables
        initialVersion=false
        echo "Initial version set to false"
        branchName="${{ inputs.test_branch_name }}"
        if [[ -z "$branchName" ]]; then
          branchName=$(git rev-parse --abbrev-ref HEAD)
        fi
        echo "Branch name: $branchName"
        
        # Use the input test version tag if provided
        if [[ -n "${{ inputs.test_version_tag }}" ]]; then
          echo "Using input test version tag: ${{ inputs.test_version_tag }}"
          latestVersion="${{ inputs.test_version_tag }}"
          baseVersion="${latestVersion}"
          initialVersion=true  # Assume initial version handling if a test version is explicitly provided
        else
          echo "Fetching all tags..."
          git fetch --tags
          
          echo "Checking for version tags..."
          if ! git tag --list 'v*' | grep -q .; then
            echo "No version tags found in the repository."
            latestVersion="0.1.0"
            initialVersion=true
          else
            latestReleaseVersion=$(git tag --sort=-v:refname | grep '^v' | head -n 1 | sed 's/^v//')
            echo "Latest release version: $latestReleaseVersion"
            latestVersion="$latestReleaseVersion"
            
            # Initialize base version for new work
            IFS='.' read -ra VER <<< "$latestVersion"
            ((VER[2]++))
            baseVersion="${VER[0]}.${VER[1]}.${VER[2]}"
          fi
        fi
        echo "Latest version: $latestVersion, initial version: $initialVersion"
        
        # Extracting the short SHA from the latest commit
        shortSHA=$(git rev-parse --short HEAD)
        echo "Short SHA: $shortSHA"

        # Construct version postfix template based on branch type
        versionPostfixTemplate=""
        echo "Starting construction of version postfix template..."
        
        # Additional script logic continues here...
        # This part remains unchanged from your original script
