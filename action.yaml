name: 'Compute Version'
description: 'Compute version based on branch name and git tags'
inputs:
  test_version_tag:
    description: 'Optional test version tag for testing purposes'
    required: false
    default: ''
  test_branch_name:
    description: 'Optional test branch name for testing purposes'
    required: false
    default: ''
outputs:
  version:
    description: 'The computed version string'
    value: ${{ steps.compute-version.outputs.version }}
runs:
  using: 'composite'
  steps:
    - name: Compute and Validate Version
      shell: bash
      id: compute-version
      run: |
        # Initialize variables
        initialVersion=false
        branchName="${{ inputs.test_branch_name }}"
        if [[ -z "$branchName" ]]; then
          branchName=$(git rev-parse --abbrev-ref HEAD)
        fi
        
        test_version_tag="${{ inputs.test_version_tag }}"
        test_branch_name="${{ inputs.test_branch_name }}"
        #if test vars set then set test_mode=true
        if [[ -n "$test_version_tag" || -n "$test_branch_name" ]]; then
          test_mode=true
        else
          test_mode=false
        fi
        
        # echo out test vars for debugging
        echo "test_version_tag: ${test_version_tag}"
        echo "test_branch_name: ${test_branch_name}"
        echo "Test mode: $test_mode"
        echo "Branch name: $branchName"

        # Fetching all tags might be necessary if you haven't already fetched the tags
        echo "Fetching all tags..."
        git fetch --tags

        # Use the input test version if provided, otherwise look up the version
        if [[ -n "$test_version_tag" ]]; then
            latestVersion=$(echo "$test_version_tag" | sed 's/^v//')
            echo "Using input test version: $latestVersion"
        else
            echo "Checking for version tags..."
            git tag --sort=-v:refname
            latestReleaseVersion=$(git tag --sort=-v:refname | grep '^v' | head -n 1 | sed 's/^v//')
            echo "Latest release version: '$latestReleaseVersion'"
            if [[ -z "$latestReleaseVersion" ]]; then
                echo "No version tags found in the repository."
                latestVersion="0.1.0"
            else
                echo "Latest release version: $latestReleaseVersion"
                latestVersion="$latestReleaseVersion"
            fi
        fi
        echo "Latest version: '$latestVersion'"

        shortSHA=$(git rev-parse --short HEAD)
        echo "Short SHA: $shortSHA"

        if [[ "$initialVersion" == true ]]; then
          nextBaseVersion="${latestVersion}"
        else
          IFS='+' read -ra VERSION_SPLIT <<< "$latestVersion"
          semanticVersion="${VERSION_SPLIT[0]}"

          IFS='.' read -ra VER <<< "$semanticVersion"
          major="${VER[0]}"
          minor="${VER[1]}"
          patch="${VER[2]}"

          nextPatch=$((patch + 1))
          baseVersion="${major}.${minor}.${patch}"
          nextBaseVersion="${major}.${minor}.${nextPatch}"
        fi
        echo "Base version for new work: $nextBaseVersion"

        versionPostfixTemplate=""
        echo "Starting construction of version postfix template..."

        case "$branchName" in
          feature/*|bugfix/*|alpha/*|beta/*)
            # Assuming branchName is like "feature/JIRA-1234" or "featurejira1234"
            jiraCardID=$(echo $branchName | grep -oEi '[A-Z]+-?[0-9]+' | sed 's/[-_]//g' || echo "")
            echo "JIRA Card ID: $jiraCardID"
            if [[ ! -z "$jiraCardID" ]]; then
              versionPostfixTemplate="-${branchName%%/*}${jiraCardID^^}-${shortSHA}"
            else
              # Just in case no JIRA card ID is found, fallback to branch name and SHA
              versionPostfixTemplate="-${branchName%%/*}-${shortSHA}"
            fi
            ;;
          develop*)
            versionPostfixTemplate="-develop-${shortSHA}"
            ;;
          release*)
            versionPostfixTemplate=""  
            ;;
          *)
            versionPostfixTemplate="-${branchName%%/*}-${shortSHA}"  
            ;;
        esac
        echo "Version postfix template: $versionPostfixTemplate"

        regexToMatch="${nextBaseVersion}${versionPostfixTemplate//./\\.}\+([0-9]+)$"
        echo "Regex to match: $regexToMatch"

        matchingTags=$(git tag --list | grep -P "$regexToMatch" || echo "")
        echo "Matching tags: $matchingTags"

        newVersion="${nextBaseVersion}${versionPostfixTemplate}${nextBuildNumber}"  
        
        echo "Computed Version: $newVersion"
        echo "version=$(echo $newVersion)" >> $GITHUB_OUTPUT
